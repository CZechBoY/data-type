<?php

namespace h4kuna\DataType\Basic;

use h4kuna\DataType\Basic\Gps;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-11 at 10:31:47.
 */
class GpsTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @covers h4kuna\DataType\Basic\Gps::fromString
     * @todo   Implement testFromString().
     */
    public function testFromString()
    {
        // Praha
        $expected = array('50.0835494', '14.4341414');
        $this->assertSame($expected, self::round7(Gps::fromString('50.0835494N, 14.4341414E')));
        $this->assertSame($expected, self::round7(Gps::fromString('50.0835494, 14.4341414')));
        $this->assertSame($expected, self::round7(Gps::fromString("N 50°5.012965', E 14°26.048485'")));
        $this->assertSame($expected, self::round7(Gps::fromString('50°5\'0.778"N, 14°26\'2.909"E')));
        $this->assertSame($expected, self::round7(Gps::fromString('N50.0835494° E14.4341414°')));

        // no whitespace
        $this->assertSame($expected, self::round7(Gps::fromString('50.0835494N,14.4341414E')));
        $this->assertSame($expected, self::round7(Gps::fromString('50.0835494,14.4341414')));
        $this->assertSame($expected, self::round7(Gps::fromString("N50°5.012965',E14°26.048485'")));
        $this->assertSame($expected, self::round7(Gps::fromString('50°5\'0.778"N,14°26\'2.909"E')));
        $this->assertSame($expected, self::round7(Gps::fromString('N50.0835494°E14.4341414°')));
        
        
        $expected = array('-50.0835494', '14.4341414');
        $this->assertSame($expected, self::round7(Gps::fromString('50.0835494S, 14.4341414E')));
        
        $expected = array('50.0835494', '-14.4341414');
        $this->assertSame($expected, self::round7(Gps::fromString('50.0835494N, 14.4341414W')));
        
        $expected = array('-50.0835494', '-14.4341414');
        $this->assertSame($expected, self::round7(Gps::fromString('50.0835494S, 14.4341414W')));
    }

    private static function round7(array $coordinate)
    {
        $out = array();
        foreach ($coordinate as $v) {
            $out[] = (string) round($v, 7);
        }
        return $out;
    }

}
